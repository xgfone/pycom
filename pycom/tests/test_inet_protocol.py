# encoding: utf-8
from __future__ import unicode_literals

import unittest
from pycom import inet_protocol as inet


class InetTest(unittest.TestCase):
    def test_arp(self):
        d = (b"\xff\xff\xff\xff\xff\xff\x08\x10\x77\xb5\xab\xd3\x08\x06\x00"
             b"\x01\x08\x00\x06\x04\x00\x01\x08\x10\x77\xb5\xab\xd3\xc0\xa8"
             b"\x01\x01\x00\x00\x00\x00\x00\x00\xc0\xa8\x01\x18\x00\x00\x00"
             b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        data = inet.ParseMAC(d)
        l = [data.__class__, data.next.__class__]
        r = [inet.ParseMAC, inet.ParseARP]
        self.assertEqual(l, r)

    def test_icmp_request(self):
        d = (b"\x08\x10\x77\xb5\xab\xd3\x80\xe6\x50\x0e\x1c\xba\x08\x00\x45"
             b"\x00\x00\x54\xc8\xa3\x00\x00\x40\x01\x2e\x9d\xc0\xa8\x01\x17"
             b"\xc0\xa8\x01\x01\x08\x00\xb1\x72\x79\x2e\x00\x00\x56\x69\x7b"
             b"\xff\x00\x07\x0f\xec\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11"
             b"\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
             b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f"
             b"\x30\x31\x32\x33\x34\x35\x36\x37")
        data = inet.ParseMAC(d)
        ipv4 = data.next
        icmp = ipv4.next
        l = (data.__class__, ipv4.__class__, icmp.__class__)
        r = (inet.ParseMAC, inet.ParseIPv4, inet.ParseICMP)
        self.assertEqual(l, r)

    def test_tcp(self):
        d = (b"\x08\x10\x77\xb5\xab\xd3\x80\xe6\x50\x0e\x1c\xba\x08\x00\x45\x00"
             b"\x01\x4b\xa3\x41\x40\x00\x40\x06\x2d\x6d\xc0\xa8\x01\x17\x8c\xcf"
             b"\x1a\x70\xe0\x29\x01\xbb\x3e\xad\xce\xc3\x0b\x68\x8b\x6f\x50\x18"
             b"\xff\xff\x0f\x6b\x00\x00\x00\x00\x01\x23\x00\x10\x00\x01\x00\x00"
             b"\x00\xe9\x00\x00\x0b\x5d\x4e\x10\x11\x02\x02\x01\x00\x00\x00\x00"
             b"\xf7\x03\x86\x01\x86\x01\x91\x01\x0e\x0c\xbe\xe1\xff\x0b\x6c\x59"
             b"\xd6\x82\xdf\xff\x5c\xd8\x3f\x8b\x5e\xdd\x12\x63\xbf\x64\x10\x2d"
             b"\xf4\x44\x36\x16\x7f\xfb\x4e\x69\x9d\x56\x58\x13\x6e\x08\xbe\xbe"
             b"\xff\xb6\x79\x76\x74\xf4\xac\x73\xe4\xed\x4e\xf8\x86\xfe\x1d\x70"
             b"\x99\xfb\xf0\xb0\x3e\xe3\xdf\xa6\x4c\x5f\x1b\x41\x5e\x5c\x23\x42"
             b"\x6b\x4b\xe4\xda\xa3\x1f\x12\x31\x19\x2c\x0c\x31\xab\x2c\x42\x54"
             b"\x6c\x92\x5f\x44\xa3\xc3\x0e\xaf\x1a\x95\x2f\x5e\x9d\xbb\x9b\x7c"
             b"\xb1\x36\x37\x50\x4e\xfb\x4e\xa3\xe1\x3a\xbc\x2f\xd7\x88\x44\xbd"
             b"\x25\x95\xbd\xcc\x69\x85\xe1\xd4\xc1\xdd\x5a\x9a\x2a\x00\xfc\x45"
             b"\xff\x2f\xb7\x25\xe2\x07\x1c\x2f\x37\xd1\xee\x30\xe1\x24\x4a\x24"
             b"\x5d\xac\x80\x55\x13\x91\xfc\x0d\x52\x95\x47\x72\x52\xfa\x47\xa7"
             b"\xcd\x54\x10\x7e\x54\x9c\x03\xb5\x06\xed\x9f\xa7\x40\x30\x1a\x48"
             b"\xb3\xc5\xbe\x67\x71\x26\xa9\x9b\x43\xed\xc2\x9a\x38\xfb\x63\xd4"
             b"\x92\x6b\x2b\x0a\xa3\xd7\x9f\x6e\x30\xb3\xad\x52\x9c\xd1\x1f\x8d"
             b"\xfa\x23\x5c\x29\xfe\xd1\x93\x80\xf8\x89\x9a\x0c\xf8\x7d\xde\xe1"
             b"\x3d\x8e\x61\x45\xc7\xef\x6d\x25\x45\x9a\x3e\x01\x7c\x9d\x8d\xbf"
             b"\xf8\x5e\x61\x48\xd9\x3a\xcb\xef\x18")
        data = inet.ParseMAC(d)
        ipv4 = data.next
        tcp = ipv4.next
        l = (data.__class__, ipv4.__class__, tcp.__class__)
        r = (inet.ParseMAC, inet.ParseIPv4, inet.ParseTCP)
        self.assertEqual(l, r)

    def test_udp(self):
        d = (b"\x33\x33\x00\x00\x00\x0c\x08\x62\x66\x85\xf0\x38\x86\xdd\x60\x00"
             b"\x00\x00\x00\x9a\x11\x01\xfe\x80\x00\x00\x00\x00\x00\x00\x45\x00"
             b"\xc1\x3b\x49\xbb\xe2\xaf\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00"
             b"\x00\x00\x00\x00\x00\x0c\xdc\x78\x07\x6c\x00\x9a\x88\x3f\x4d\x2d"
             b"\x53\x45\x41\x52\x43\x48\x20\x2a\x20\x48\x54\x54\x50\x2f\x31\x2e"
             b"\x31\x0d\x0a\x48\x6f\x73\x74\x3a\x5b\x46\x46\x30\x32\x3a\x3a\x43"
             b"\x5d\x3a\x31\x39\x30\x30\x0d\x0a\x53\x54\x3a\x75\x72\x6e\x3a\x4d"
             b"\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x57\x69\x6e\x64\x6f\x77\x73"
             b"\x20\x50\x65\x65\x72\x20\x4e\x61\x6d\x65\x20\x52\x65\x73\x6f\x6c"
             b"\x75\x74\x69\x6f\x6e\x20\x50\x72\x6f\x74\x6f\x63\x6f\x6c\x3a\x20"
             b"\x56\x34\x3a\x49\x50\x56\x36\x3a\x4c\x69\x6e\x6b\x4c\x6f\x63\x61"
             b"\x6c\x0d\x0a\x4d\x61\x6e\x3a\x22\x73\x73\x64\x70\x3a\x64\x69\x73"
             b"\x63\x6f\x76\x65\x72\x22\x0d\x0a\x4d\x58\x3a\x33\x0d\x0a\x0d\x0a")
        data = inet.ParseMAC(d)
        ipv6 = data.next
        udp = ipv6.next
        l = (data.__class__, ipv6.__class__, udp.__class__)
        r = (inet.ParseMAC, inet.ParseIPv6, inet.ParseUDP)
        self.assertEqual(l, r)
